Documentation Standards
All programming projects must be documented. Documentation counts for at most 10% of the programming project grade. At the top of each file, please include a comment block containing the following information. Note, it does not have to look like this "box" style documentation. However, it should be very readable.
Your Name
Course Name
Project Number and Title
Due Date
Instructor's Name
EXAMPLE:
//********************************************************************
//
// Ima CPP. Programmer
// Operating Systems
// Programming Project #0: Project Title
// January 1, 1970
// Instructor: Dr. Ajay K. Katangur
//
//********************************************************************

Each procedure or function should have a documentation "header" that includes the following information
Function or Procedure Name
A Brief Description of the Function or Procedure
Value Parameter Data Dictionary
Reference Parameter Data Dictionary
Local Variable Data Dictionary
EXAMPLE:
//********************************************************************
//
// Linear Search Function
//
// This function performs a linear search on an list of student
// records.  If the search key is found in the list, the return
// value is true and false otherwise.
//
// Return Value
// ------------
// bool                         True/False if Key is found
//
// Value Parameters
// ----------------
// Key		string		The search key
// SList	StudentList	The list of student structures
//
// Reference Parameters
// --------------------
// location     int             The location where Key is found
//
// Local Variables
// ---------------
// ii		int		Loop Iteration Variable
// retval	int		Temporary Return Value
//
//*******************************************************************
bool linear_search( SList StudentList, string Key, int &location )
{
  // local variables
  bool retval;
  int ii;


  // initialize local variables
  retval = false;
  ii = 0;


  location = -1;


  // search for the key in the list
  for( ii=0; ((ii<SList.Size()) && (!retval)); ii++ )
     if( SList.Name == Key )
       {
         location = ii;
	 retval = true;
       }


  // return to calling function
  return( retval );
}